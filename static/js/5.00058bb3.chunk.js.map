{"version":3,"sources":["pages/chat/ChatPage.tsx"],"names":["Chat","status","useSelector","state","chat","dispatch","useDispatch","useEffect","startMessagesListening","stopMessagesListening","Messages","AddMessageForm","messages","messageAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","style","height","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","index","ChatMessage","message","ref","React","memo","src","photo","width","alt","userName","setMessage","onChange","value","onKeyUp","keyCode","ctrlKey","sendMessage","disabled","onClick","ChatPage"],"mappings":"8JAcMA,EAAiB,WAEnB,IAAMC,EAASC,aAAY,SAACC,GAAD,OAA6BA,EAAMC,KAAKH,UAC7DI,EAAWC,cAUjB,OARAC,qBAAU,WAEN,OADAF,EAASG,eACF,WACHH,EAASI,kBAEd,IAGI,8BACS,UAAXR,EAAqB,gFAClB,qCACI,cAACS,EAAD,IACA,cAACC,EAAD,UAIVD,EAAqB,WACvB,IAAME,EAAWV,aAAY,SAACC,GAAD,OAA6BA,EAAMC,KAAKQ,YAC/DC,EAAmBC,iBAAuB,MAFnB,EAGWC,oBAAS,GAHpB,mBAGtBC,EAHsB,KAGRC,EAHQ,KAoB7B,OANAV,qBAAU,WACa,IAAD,EAAdS,IACA,UAAAH,EAAiBK,eAAjB,SAA0BC,eAAe,CAACC,SAAU,cAEzD,CAACR,IAEG,sBAAKS,MAAO,CAACC,OAAQ,QAASC,UAAW,QAASC,SAfnC,SAACC,GACnB,IAAMC,EAAUD,EAAEE,cACdC,KAAKC,IAAKH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAgB,IAC7EhB,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAUjC,UACFL,EAASqB,KAAI,SAACC,EAAGC,GAAJ,OAAc,cAACC,EAAD,CAAyBC,QAASH,GAAhBC,MAC9C,qBAAKG,IAAKzB,QAKZuB,EAAyDG,IAAMC,MAAK,YAAgB,IAAdH,EAAa,EAAbA,QAGxE,OAAO,gCACH,qBAAKI,IAAKJ,EAAQK,MAAOrB,MAAO,CAACsB,MAAO,QAASC,IAAK,QADnD,IAC4D,4BAAIP,EAAQQ,WAC3E,uBACCR,EAAQA,QACT,6BAMF1B,EAA2B,WAAO,IAAD,EAELI,mBAAS,IAFJ,mBAE5BsB,EAF4B,KAEnBS,EAFmB,KAG7B7C,EAASC,aAAY,SAACC,GAAD,OAA6BA,EAAMC,KAAKH,UAC7DI,EAAWC,cAmBjB,OAAO,gCACH,8BACI,0BAAUyC,SAAU,SAACtB,GAAD,OAAOqB,EAAWrB,EAAEE,cAAcqB,QAAQA,MAAOX,EAC3DY,QAbqB,SAACxB,GAC/BY,IAGc,KAAdZ,EAAEyB,SAAgC,KAAdzB,EAAEyB,UAAmBzB,EAAE0B,UAC5C9C,EAAS+C,YAAYf,IACrBS,EAAW,WAUf,wBAAQO,SAAqB,UAAXpD,EAAoBqD,QAvBf,WAClBjB,IAGLhC,EAAS+C,YAAYf,IACrBS,EAAW,MAkBX,sBAMOS,UAvGY,WAEvB,OAAO,8BACH,cAACvD,EAAD","file":"static/js/5.00058bb3.chunk.js","sourcesContent":["import React, {useEffect, useRef, useState} from \"react\";\r\nimport {ChatMessageAPIType} from \"../../api/chat-api\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {sendMessage, startMessagesListening, stopMessagesListening} from \"../../Redux/chat-reducer\";\r\nimport {AppRootStoreType} from \"../../Redux/redux-store\";\r\n\r\n\r\nconst ChatPage: React.FC = () => {\r\n\r\n    return <div>\r\n        <Chat/>\r\n    </div>\r\n}\r\n\r\nconst Chat: React.FC = () => {\r\n\r\n    const status = useSelector((state: AppRootStoreType) => state.chat.status)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessagesListening())\r\n        return () => {\r\n            dispatch(stopMessagesListening())\r\n        }\r\n    }, [])\r\n\r\n\r\n    return <div>\r\n        {status === 'error' ? <div>Some error occurred. Please refresh the page.</div> :\r\n            <>\r\n                <Messages/>\r\n                <AddMessageForm/>\r\n            </>}\r\n    </div>\r\n}\r\nconst Messages: React.FC = () => {\r\n    const messages = useSelector((state: AppRootStoreType) => state.chat.messages)\r\n    const messageAnchorRef = useRef<HTMLDivElement>(null)\r\n    const [isAutoScroll, setIsAutoScroll] = useState(true)\r\n\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const element = e.currentTarget\r\n        if (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 30) {\r\n            !isAutoScroll && setIsAutoScroll(true)\r\n        } else {\r\n            isAutoScroll && setIsAutoScroll(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isAutoScroll) {\r\n            messageAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\r\n        }\r\n    }, [messages])\r\n\r\n    return <div style={{height: '400px', overflowY: 'auto'}} onScroll={scrollHandler}>\r\n        {messages.map((m, index) => <ChatMessage key={index} message={m}/>)}\r\n        <div ref={messageAnchorRef}></div>\r\n    </div>\r\n}\r\n\r\n\r\nconst ChatMessage: React.FC<{ message: ChatMessageAPIType }> = React.memo(({message}) => {\r\n\r\n\r\n    return <div>\r\n        <img src={message.photo} style={{width: '30px'}} alt={'ava'}/> <b>{message.userName}</b>\r\n        <br/>\r\n        {message.message}\r\n        <hr/>\r\n\r\n    </div>\r\n})\r\n\r\n\r\nconst AddMessageForm: React.FC = () => {\r\n\r\n    const [message, setMessage] = useState('')\r\n    const status = useSelector((state: AppRootStoreType) => state.chat.status)\r\n    const dispatch = useDispatch()\r\n\r\n    const sendMessageHandler = () => {\r\n        if (!message) {\r\n            return\r\n        }\r\n        dispatch(sendMessage(message))\r\n        setMessage('')\r\n    }\r\n    const sendMessageFromTextareaHandler = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\r\n        if (!message) {\r\n            return\r\n        }\r\n        if ((e.keyCode === 10 || e.keyCode === 13) && e.ctrlKey) {\r\n            dispatch(sendMessage(message))\r\n            setMessage('')\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <div>\r\n            <textarea onChange={(e) => setMessage(e.currentTarget.value)} value={message}\r\n                      onKeyUp={sendMessageFromTextareaHandler}/>\r\n        </div>\r\n\r\n        <button disabled={status !== 'ready'} onClick={sendMessageHandler}>\r\n            Send\r\n        </button>\r\n    </div>\r\n}\r\n\r\nexport default ChatPage"],"sourceRoot":""}